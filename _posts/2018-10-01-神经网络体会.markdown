---
layout: post
title: 神经网络初尝试
date: 2018-01-29
---
<br>写这篇博客主要想总结一下最近学神经网络遇到的问题及其答案，不得不说接触神经网络真的感觉好复杂好深奥，有种后悔入计算机专业的感觉，但是了解了皮毛之后我有了一点成就感，并对它产生兴趣，也坚定了我要学习学会学精它的信心。
<br>下面说一下我对神经网络的看法吧。神经网络经历了多年的发展已经衍生出很多不同形式，我现在接触的只是最基本的ANN(Artificial Neural Network)，还听过CNN，KNN等，它们都是模拟人的神经元，在构造具有输入-处理-输出的神经网络。神经网络可分为三层——输入层、隐藏层和输出层，隐藏层往往并不止是一层，可能会有很多层，我们可以把它想成一个黑盒，黑盒接收输入，完成计算，返回输出。为了实现复杂的计算，每一层可能都会需要海量的节点，每层的每个节点通常与下一层的每个节点连接起来，它们的连线上有各自的权重，这个权重最初一般是随机的，可以通过反向传播（BP）来实现权重的调节，我们需要大量的数据来训练网络，这样它才可以更好地调整权重，提高准确率，听起来好像它真的像个孩子一样在自我学习，这让我想起了我十个月的小外甥，之前我每次回家他都好像不认识我了一样，总是需要一段时间才能适应，现在他再见到我应该不会再需要很长时间来识别我了吧，就像神经网络准确率逐渐提高的过程。



```python
import numpy
import scipy.special
import matplotlib.pyplot 







# number of input, hidden and output nodes
input_nodes = 784
hidden_nodes = 200
output_nodes = 10

# learning rate
learning_rate = 0.1

# create instance of neural network
n = neuralNetwork(input_nodes,hidden_nodes,output_nodes, learning_rate)

# load the mnist training data CSV file into a list
training_data_file = open("mnist_dataset/mnist_train.csv", 'r')
training_data_list = training_data_file.readlines()
training_data_file.close()

# test the neural network

# scorecard for how well the network performs, initially empty
scorecard = []

# go through all the records in the test data set
for record in test_data_list:
    # split the record by the ',' commas
    all_values = record.split(',')
    # correct answer is first value
    correct_label = int(all_values[0])
    # scale and shift the inputs
    inputs = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
    # query the network
    outputs = n.query(inputs)
    # the index of the highest value corresponds to the label
    label = numpy.argmax(outputs)
    # append correct or incorrect to list
    if (label == correct_label):
        # network's answer matches correct answer, add 1 to scorecard
        scorecard.append(1)
    else:
        # network's answer doesn't match correct answer, add 0 to scorecard
        scorecard.append(0)
        pass
    
    pass

# calculate the performance score, the fraction of correct answers
scorecard_array = numpy.asarray(scorecard)
print ("performance = ", scorecard_array.sum() / scorecard_array.size)
```
