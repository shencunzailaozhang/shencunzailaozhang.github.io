---
layout: post
title: 神经网络初尝试
date: 2018-01-29
---
写这篇博客主要想总结一下最近学神经网络遇到的问题及其答案，不得不说接触神经网络真的感觉好复杂好深奥，有种后悔入计算机专业的感觉，但是了解了皮毛之后我有了一点成就感，并对它产生兴趣，也坚定了我要学习学会学精它的信心。

* 问题1：神经网络是什么？
神经网络经历了多年的发展已经衍生出很多不同形式，我现在接触的只是最基本的ANN(Artificial Neural Network)，还听过CNN，KNN等，它们都是模拟人的神经元，在构造具有输入-处理-输出的神经网络。神经网络可分为三层——输入层、隐藏层和输出层，隐藏层往往并不止是一层，可能会有很多层，我们可以把它想成一个黑盒，黑盒接收输入，完成计算，返回输出。为了实现复杂的计算，每一层可能都会需要海量的节点，每层的每个节点通常与下一层的每个节点连接起来，它们的连线上有各自的权重，这个权重最初一般是随机的，可以通过反向传播（BP）来实现权重的调节，我们需要大量的数据来训练网络，这样它才可以更好地调整权重，提高准确率，听起来好像它真的像个孩子一样在自我学习，这让我想起了我十个月的小外甥，之前我每次回家他都好像不认识我了一样，总是需要一段时间才能适应，现在他再见到我应该不会再需要很长时间来识别我了吧，就像神经网络准确率逐渐提高的过程。
* 问题2：如何用神经网络识别手写集？
不得不说，这个问题困扰了我很久，怎么把乱七八糟的输出和数字对应起来呢，直到刚刚我才解决了这个问题，这也是这篇blog的初衷。首先得知道手写集的格式，现在广为使用的mnist.csv数据集里每个手写字由785个0-255范围（黑到白的范围）内的数字组成的，第一个数字表示的是手写字的数值，剩下的784个数字可以用matplotlib.pyplot中的imshow函数处理为28x28的图片形式，这样可以很直观地看到，784个数字经过归一化处理后变成输入数组放进输入层，也就是说输入层有784个节点。在识别之前需要进行大量的训练，因为是识别十个数字（0-9），所以让输出节点个数为10，我们让这十个节点中对应正确手写字数值的节点的权值为0.99，其余的权值为0.01，然后把这十个权值当作目标数组，将输入数组和目标数组放入训练函数中训练。经过训练后，我们可以用测试集中的数据作为输入放进query函数中可以得到输出，*输出数组中的最大值对应的索引值便是神经网络给出的手写字的答案*。



```python
import numpy
import scipy.special
import matplotlib.pyplot 


# neural network class definition
class neuralNetwork:
    
    
    # initialise the neural network
    def __init__(self, inputnodes, hiddennodes, outputnodes, learningrate):
        # set number of nodes in each input, hidden, output layer
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        
        # link weight matrices, wih and who
        # weights inside the arrays are w_i_j, where link is from node i to node j in the next layer
        # w11 w21
        # w12 w22 etc 
        self.wih = numpy.random.normal(0.0, pow(self.inodes, -0.5), (self.hnodes, self.inodes))
        self.who = numpy.random.normal(0.0, pow(self.hnodes, -0.5), (self.onodes, self.hnodes))

        # learning rate
        self.lr = learningrate
        
        # activation function is the sigmoid function
        self.activation_function = lambda x: scipy.special.expit(x)
        
        pass

    
    # train the neural network
    def train(self, inputs_list, targets_list):
        # convert inputs list to 2d array
        inputs = numpy.array(inputs_list, ndmin=2).T
        targets = numpy.array(targets_list, ndmin=2).T
        
        # calculate signals into hidden layer
        hidden_inputs = numpy.dot(self.wih, inputs)
        # calculate the signals emerging from hidden layer
        hidden_outputs = self.activation_function(hidden_inputs)
        
        # calculate signals into final output layer
        final_inputs = numpy.dot(self.who, hidden_outputs)
        # calculate the signals emerging from final output layer
        final_outputs = self.activation_function(final_inputs)
        
        # output layer error is the (target - actual)
        output_errors = targets - final_outputs
        # hidden layer error is the output_errors, split by weights, recombined at hidden nodes
        hidden_errors = numpy.dot(self.who.T, output_errors) 
        
        # update the weights for the links between the hidden and output layers
        self.who += self.lr * numpy.dot((output_errors * final_outputs * (1.0 - final_outputs)), numpy.transpose(hidden_outputs))
        
        # update the weights for the links between the input and hidden layers
        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs))
        
        pass

    
    # query the neural network
    def query(self, inputs_list):
        # convert inputs list to 2d array
        inputs = numpy.array(inputs_list, ndmin=2).T
        
        # calculate signals into hidden layer
        hidden_inputs = numpy.dot(self.wih, inputs)
        # calculate the signals emerging from hidden layer
        hidden_outputs = self.activation_function(hidden_inputs)
        
        # calculate signals into final output layer
        final_inputs = numpy.dot(self.who, hidden_outputs)
        # calculate the signals emerging from final output layer
        final_outputs = self.activation_function(final_inputs)
        
        return final_outputs




# number of input, hidden and output nodes
input_nodes = 784
hidden_nodes = 200
output_nodes = 10

# learning rate
learning_rate = 0.1

# create instance of neural network
n = neuralNetwork(input_nodes,hidden_nodes,output_nodes, learning_rate)

# load the mnist training data CSV file into a list
training_data_file = open("mnist_dataset/mnist_train.csv", 'r')
training_data_list = training_data_file.readlines()
training_data_file.close()

# train the neural network

# epochs is the number of times the training data set is used for training
epochs = 5

for e in range(epochs):
    # go through all records in the training data set
    for record in training_data_list:
        # split the record by the ',' commas
        all_values = record.split(',')
        # scale and shift the inputs
        inputs = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
        # create the target output values (all 0.01, except the desired label which is 0.99)
        targets = numpy.zeros(output_nodes) + 0.01
        # all_values[0] is the target label for this record
        targets[int(all_values[0])] = 0.99
        n.train(inputs, targets)
        pass
    pass


# load the mnist test data CSV file into a list
test_data_file = open("mnist_dataset/mnist_test.csv", 'r')
test_data_list = test_data_file.readlines()
test_data_file.close()
# test the neural network

# scorecard for how well the network performs, initially empty
scorecard = []

# go through all the records in the test data set
for record in test_data_list:
    # split the record by the ',' commas
    all_values = record.split(',')
    # correct answer is first value
    correct_label = int(all_values[0])
    # scale and shift the inputs
    inputs = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
    # query the network
    outputs = n.query(inputs)
    # the index of the highest value corresponds to the label
    label = numpy.argmax(outputs)
    # append correct or incorrect to list
    if (label == correct_label):
        # network's answer matches correct answer, add 1 to scorecard
        scorecard.append(1)
    else:
        # network's answer doesn't match correct answer, add 0 to scorecard
        scorecard.append(0)
        pass
    
    pass

# calculate the performance score, the fraction of correct answers
scorecard_array = numpy.asarray(scorecard)
print ("performance = ", scorecard_array.sum() / scorecard_array.size)
```
