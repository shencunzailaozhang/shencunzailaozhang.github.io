---
layout: post
title: 后序非递归遍历二叉树算法思想及程序
date: 2018-06-03
---
# 算法思想：
若根结点不为空，那么此时
## 1.
从根结点开始，沿着左子树一直寻找，直到找到没有左子树的结点为止，
在查找的过程中，将所有寻找过的结点的地址进栈；执行步骤2
## 2.
当找到没有左孩子的结点时，此时访问栈顶结点，判断该结点右子树是否为空？执行步骤2.1
  ### 2.1
    若为空，则退出栈顶结点，再继续访问栈顶结点，判断其右结点是否为空且是否为刚刚访问过的结点？
    若为空，则退出栈顶结点，执行步骤2.1；
    若不为空且是刚刚访问过的结点，则退出栈顶结点执行步骤2.1；
    若不为空且不是刚刚访问过的结点，则执行步骤2.2。
  ### 2.2
  若不为空，则把右结点当作根结点，重复步骤1。直到栈中没有元素，整棵二叉树遍历完毕。
  # 代码如下：
  
``` C++
#include "stdafx.h"
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<omp.h>
#include "windows.h"
#include "time.h"
#include "iostream"
#include <process.h>  
using namespace std;
#define maxsize 33554432
#define N 24
typedef int binaryTreeType; //二叉树类型
int a[1024] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 };

typedef struct node//二叉树结点类型
{
	binaryTreeType data;
	struct node *leftChild, *rightChild;
}bitree;

binaryTreeType *m = new binaryTreeType[maxsize];
void shuzu()//生成随机数
{
	srand((unsigned)time(NULL));
	for (int i = 0; i<pow(2, N) - 1; i++){//随机生成结点
		m[i] = rand();
	}
}
bitree *root = (bitree *)malloc(sizeof(bitree));
bitree **QUEUE = new bitree*[maxsize];
bitree *createTree() //建二叉树返回指向根的指针
{
	bitree *s;
	binaryTreeType n = 0;
	binaryTreeType i;
	for (i = 0; i <pow(2, N) - 1; i++){//////////层高为N,树的节点个数为2的N次方-1
		s = (bitree *)malloc(sizeof(bitree));
		s->data = m[i];
		s->leftChild = NULL;
		s->rightChild = NULL;
		n++;
		QUEUE[n] = s;
		if (n == 1)
			root = s;
		else if (s&&QUEUE[n / 2]) {
			if (n % 2 == 0)
				QUEUE[n / 2]->leftChild = s;
			else
				QUEUE[n / 2]->rightChild = s;
		}
	}
	return root; //返回根指针
}
bitree *t = (bitree *)malloc(sizeof(bitree));
void nonVerPostOrder(bitree *rooot, int m, binaryTreeType n[]) //非递归后序,以rooot为根节点，m为层高，数组n用来存放后序遍历序列
{
	bitree **num = new bitree*[maxsize];

bitree *p;
	binaryTreeType x = 0;
	binaryTreeType i;
	binaryTreeType top = -1;
	binaryTreeType flag = 0;
	t = rooot;
	for (i = 0; i<pow(2, m - 1); i++) { /////////////层高为N,循环次数为2的N-1次方+1
		while (t){
			top++;
			num[top] = t;
			t = t->leftChild;
		}
		p = NULL;
		flag = 1;
		while (top != -1 && flag){
			t = num[top];
			if (t->rightChild == p){
				n[x] = t->data;
				top--;
				p = t;
				x++;
			}
			else{
				t = t->rightChild;
				flag = 0;
			}
		}
	}
}
void output(binaryTreeType n[], binaryTreeType m){//用来输出层高为m的树的遍历序列
	for (binaryTreeType i = 0; i < pow(2, m) - 1; i++)
	{
		printf("%d ", n[i]);
	}
}
int _tmain(){
	double begin, end, a;
	shuzu();
	root = createTree();
	printf("根结点是：");
	printf("%d \n", root->data);
	begin = omp_get_wtime();
	printf("%s\n ", "后序遍历的结果是：");
	nonVerPostOrder(root, N, m);
	end = omp_get_wtime();
	a = end - begin;
	printf("\n");
	printf("串行时间为:%fs\n", a);
	getchar();
	delete[] m;
	delete[] QUEUE;
	return 0;
}
```

# OpenMP并行
``` C++
#include "stdafx.h"
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<omp.h>
#include "windows.h"
#include "time.h"
#include "iostream"
#include <process.h>  
using namespace std;
#define maxsize 33554432
#define N 15
#define THREAD_NUM 2 //使用的线程数 
typedef int binaryTreeType; //二叉树类型
binaryTreeType a[1024] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 };
binaryTreeType *m = new binaryTreeType[maxsize];
binaryTreeType *x1 = new binaryTreeType[maxsize];
binaryTreeType *x2 = new binaryTreeType[maxsize];
typedef struct node
{
	binaryTreeType data;
	struct node *leftChild, *rightChild;
}bitree;

//bitree *s = (bitree *)malloc(sizeof(bitree));
bitree *root = (bitree *)malloc(sizeof(bitree));
bitree **QUEUE = new bitree*[maxsize];
void shuzu()
{
	//m = new binaryTreeType[maxsize];
	srand((unsigned)time(NULL));
	for (binaryTreeType i = 0; i<pow(2, N) - 1; i++){//随机生成结点
		m[i] = rand();
		//m[i] = a[i];
	}
}
bitree *createTree() //建二叉树返回指向根的指针
{
	bitree *s;
	binaryTreeType n = 0;
	//root = NULL;
	binaryTreeType i;
	//bitree **QUEUE = new bitree*[maxsize];
	for (i = 0; i <pow(2, N) - 1; i++){//////////层高为N,树的节点个数为2的N次方-1
		s = NULL;
		s = (bitree *)malloc(sizeof(bitree));
		s->data = m[i];
		s->leftChild = NULL;
		s->rightChild = NULL;
		n++;
		QUEUE[n] = s;
		if (n == 1)
			root = s;
		else if (s&&QUEUE[n / 2]) {
			if (n % 2 == 0)
				QUEUE[n / 2]->leftChild = s;
			else
				QUEUE[n / 2]->rightChild = s;
		}
	}
	return root; //返回根指针
}

bitree **num = new bitree*[maxsize];
void nonVerPostOrder(bitree *rooot, binaryTreeType m, binaryTreeType n[]) //非递归后序
{
	//bitree **num = new bitree*[maxsize];
	bitree *t = (bitree *)malloc(sizeof(bitree));
	//rooot = (bitree *)malloc(sizeof(bitree));
	bitree *p;
	binaryTreeType x = 0;
	binaryTreeType i;
	binaryTreeType top = -1;
	binaryTreeType flag = 0;
	t = rooot;
	for (i = 0; i<pow(2, m - 1); i++) { /////////////层高为N,循环次数为2的N-1次方
		while (t){
			top++; num[top] = t; t = t->leftChild;
		}
		p = NULL; flag = 1;
		while (top != -1 && flag){
			t = num[top];
			if (t->rightChild == p){
				n[x] = t->data; top--; p = t; x++;
			}
			else{
				t = t->rightChild; flag = 0;
			}
		}
	}
}
void output(binaryTreeType n[],binaryTreeType m){
	for (binaryTreeType i = 0; i < pow(2, m) - 1; i++)
	{
		printf("%d ", n[i]);
	}
}

binaryTreeType _tmain(){
	double begin, end, b;
	shuzu();
	root = createTree();
	printf("根结点是：");
	printf("%d \n", root->data);
	begin = omp_get_wtime();
	printf("%s\n ", "后序遍历的结果是：");
	#pragma omp parallel sections 					
		{
	#pragma omp section
			nonVerPostOrder(root->leftChild, N - 1, x1);
	#pragma omp section
			nonVerPostOrder(root->rightChild, N - 1, x2);
		}
	//output(x1, N - 1);
	//output(x2, N - 1);
	//printf("%d", root->data);
	end = omp_get_wtime();
	b = end - begin;
	printf("\n");
	printf("并行时间为:%fs\n", b);
	getchar();
	delete[] m;
	delete[] QUEUE;
	delete[] num;
	return 0;
}
```

# 创建线程方式之_beginthreadx并行
``` C++
#include "stdafx.h"
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<omp.h>
#include "windows.h"
#include "time.h"
#include "iostream"
#include <process.h>  
using namespace std;
#define maxsize 33554432
//#define max 16777216
#define N 24
#define THREAD_NUM 2 //使用的线程数 
typedef int binaryTreeType; //二叉树类型
int a[1024] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 };
int *m = new int[maxsize];
typedef struct node
{
	binaryTreeType data;
	struct node *leftChild, *rightChild;
}bitree;

//bitree *s = (bitree *)malloc(sizeof(bitree));
bitree *root = (bitree *)malloc(sizeof(bitree));
bitree **QUEUE = new bitree*[maxsize];
void shuzu()
{
	//m = new binaryTreeType[maxsize];
	srand((unsigned)time(NULL));
	for (int i = 0; i<pow(2, N) - 1; i++){//随机生成结点
		m[i] = rand();
		//m[i] = a[i];
	}
	//delete[] m;
}
bitree *createTree() //建二叉树返回指向根的指针
{
	bitree *s;
	int n = 0;
	//root = NULL;
	int i;
	//bitree **QUEUE = new bitree*[maxsize];
	//s->data = 0;
	for (i = 0; i <pow(2, N) - 1; i++){//////////层高为N,树的节点个数为2的N次方-1
		//s = NULL;
		s = (bitree *)malloc(sizeof(bitree));
		//bitree *s = (bitree *)malloc(sizeof(bitree));
		s->data = m[i];
		s->leftChild = NULL;
		s->rightChild = NULL;
		n++;
		QUEUE[n] = s;
		if (n == 1)
			root = s;
		else if (s&&QUEUE[n / 2]) {
			if (n % 2 == 0)
				QUEUE[n / 2]->leftChild = s;
			else
				QUEUE[n / 2]->rightChild = s;
		}
	}
	return root; //返回根指针
}

//bitree **num = new bitree*[maxsize];
void nonVerPostOrder(bitree *rooot, int m, binaryTreeType y[]) //非递归后序
{
	bitree **num = new bitree*[maxsize];
	bitree *t = (bitree *)malloc(sizeof(bitree));
	bitree *p;
	int x = 0;
	int i;
	int top = -1;
	int flag = 0;
	t = rooot;
	for (i = 0; i<pow(2, m - 1); i++) { /////////////层高为N,循环次数为2的N-1次方
		while (t){
			top++; num[top] = t; t = t->leftChild;
		}
		p = NULL; flag = 1;
		while (top != -1 && flag){
			t = num[top];
			if (t->rightChild == p){
				y[x] = t->data; top--; p = t; x++;
			}
			else{
				t = t->rightChild; flag = 0;
			}
		}
	}
	//for (i = 0; i < pow(2, m) - 1; i++)
	//{
	//	printf("%d ", y[i]);
	//}
}
unsigned int _stdcall ThreadProc1(LPVOID lpParameter)
{
	binaryTreeType *x1 = new binaryTreeType[maxsize];
	nonVerPostOrder(root->leftChild, N - 1,x1);
	return 0;
}

unsigned int _stdcall ThreadProc2(LPVOID lpParameter)
{
	binaryTreeType *x2 = new binaryTreeType[maxsize];
	nonVerPostOrder(root->rightChild, N - 1, x2);
	return 0;
}

int _tmain(){
	double begin, end, b;
	HANDLE h[THREAD_NUM];
	shuzu();
	root = createTree();
	printf("根结点是：");
	printf("%d \n", root->data);
	begin = omp_get_wtime();
	printf("%s\n ", "后序遍历的结果是：");
	h[0] = (HANDLE)_beginthreadex(NULL, 0, ThreadProc1, NULL, 0, NULL);
	h[1] = (HANDLE)_beginthreadex(NULL, 0, ThreadProc2, NULL, 0, NULL);
	WaitForMultipleObjects(THREAD_NUM, h, TRUE, INFINITE);
	//printf("%d", root->data);
	end = omp_get_wtime();
	b = end - begin;
	printf("\n");
	printf("并行时间为:%fs\n", b);
	getchar();
	delete[] m;
	delete[] QUEUE;
	//delete[] num;
	return 0;
}
```

# 创建线程方式之CreateThread并行
``` c++
// ConsoleApplication36.cpp : 定义控制台应用程序的入口点。
//
#include "stdafx.h"
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<omp.h>
#include "windows.h"
#include "time.h"
#include "iostream"
#include <process.h>  
using namespace std;
#define maxsize 33554432
#define N 24
#define THREAD_NUM 2 //使用的线程数 
typedef int binaryTreeType; //二叉树类型
int a[1024] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 };
int *m;
//INT_MAX
//int *x1 = (int *)malloc(sizeof(int)*maxsize);
//int *x2 = (int *)malloc(sizeof(int)*maxsize);
//binaryTreeType *x1 = new binaryTreeType[maxsize];
//binaryTreeType *x2 = new binaryTreeType[maxsize];
typedef struct node
{
	binaryTreeType data;
	struct node *leftChild, *rightChild;
}bitree;

bitree *root/*, *t*/;
void shuzu()
{
	m = new binaryTreeType[maxsize]/*(int *)malloc(sizeof(int)*maxsize)*/;
	srand((unsigned)time(NULL));
	for (int i = 0; i<pow(2, N) - 1; i++){//随机生成结点
		m[i] = rand();
		//m[i] = a[i];
	}
}
bitree *createTree() //建二叉树返回指向根的指针
{
	bitree *s; 
	int n = 0;
	root = NULL; 
	int i;
	bitree **QUEUE = new bitree*[maxsize];
	for (i = 0; i <pow(2, N) - 1; i++){//////////层高为N,树的节点个数为2的N次方-1
		s = NULL;
		s = (bitree *)malloc(sizeof(bitree));
		s->data = m[i]; 
		s->leftChild = NULL;
		s->rightChild = NULL; 
		n++; 
		QUEUE[n] = s;
		if (n == 1)
			root = s;
		else if (s&&QUEUE[n / 2]) {
			if (n % 2 == 0)
				QUEUE[n / 2]->leftChild = s;
			else
				QUEUE[n / 2]->rightChild = s;
		}
	}
	return root; //返回根指针
}
//bitree **num = new bitree*[maxsize];
void nonVerPostOrder(bitree *rooot, int m, binaryTreeType y[]) //非递归后序
{
	bitree **num= new bitree*[maxsize];
	//y = new binaryTreeType[maxsize];
	bitree *p,*t;
	//p= (bitree *)malloc(sizeof(bitree));
	int x = 0;
	int i;
	int top = -1;
	int flag = 0;
	t = rooot;
	for (i = 0; i<pow(2, m - 1); i++) { /////////////层高为N,循环次数为2的N-1次方
		while (t){
			top++; num[top] = t; t = t->leftChild;
		}
		p = NULL; flag = 1;
		while (top != -1 && flag){
			t = num[top];
			if (t->rightChild == p){
				y[x] = t->data; top--; p = t; x++;
			}
			else{
				t = t->rightChild; flag = 0;
			}
		}
	}
	//delete[] y;
	//for (i = 0; i < pow(2, m) - 1; i++)
	//{
	//	printf("%d ", y[i]);
	//}
}
DWORD WINAPI ThreadProc1(LPVOID lpParameter)
{
	binaryTreeType *x1 = new binaryTreeType[maxsize];
	nonVerPostOrder(root->leftChild, N - 1, x1);
	return 0;
}

DWORD WINAPI ThreadProc2(LPVOID lpParameter)
{
 	binaryTreeType *x2 = new binaryTreeType[maxsize];
	nonVerPostOrder(root->rightChild, N - 1, x2);
	return 0;
}
int _tmain(){
	double begin, end, b;
	int kk[THREAD_NUM];
	HANDLE h[THREAD_NUM];
	shuzu();
	root = createTree();
	printf("根结点是：");
	printf("%d \n", root->data);
	begin = omp_get_wtime();
	printf("%s\n ", "后序遍历的结果是：");
	h[0] = CreateThread(NULL, 0, ThreadProc1, &kk[0], 0, NULL);
	h[1] = CreateThread(NULL, 0, ThreadProc2, &kk[1], 0, NULL);
	WaitForMultipleObjects(THREAD_NUM, h, TRUE, INFINITE);
	//printf("%d", root->data);
	end = omp_get_wtime();
	b = end - begin;
	printf("\n");
	printf("并行时间为:%fs\n", b);
	getchar();
	return 0;
}
```






























